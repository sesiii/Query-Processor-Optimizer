%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "parser.tab.h"  /* Generated by Bison */

void count();
%}

%option yylineno
%option case-insensitive  

%%
[ \t\n\r]+      { /* Ignore whitespace */ }

"SELECT"    { printf("Matched: SELECT\n"); count(); return SELECT; }
"FROM"      { printf("Matched: FROM\n"); count(); return FROM; }
"WHERE"     { printf("Matched: WHERE\n"); count(); return WHERE; }
"JOIN"      { printf("Matched: JOIN\n"); count(); return JOIN; }
"INNER"     { printf("Matched: INNER\n"); count(); return INNER; }
"ON"        { printf("Matched: ON\n"); count(); return ON; }
"AND"       { printf("Matched: AND\n"); count(); return AND; }
"IN"        { printf("Matched: IN\n"); count(); return IN; }
"COUNT"     { printf("Matched: COUNT\n"); count(); return COUNT; }
"MAX"       { printf("Matched: MAX\n"); count(); return MAX; }
"MIN"       { printf("Matched: MIN\n"); count(); return MIN; }
"AVG"       { printf("Matched: AVG\n"); count(); return AVG; }
"."         { printf("Matched: DOT\n"); count(); return DOT; }

[a-zA-Z_][a-zA-Z0-9_]* { 
    printf("Matched IDENTIFIER: %s\n", yytext);
    count(); 
    yylval.str = strdup(yytext);
    return IDENTIFIER; 
}

[0-9]+(\.[0-9]+)? { 
    printf("Matched NUMBER: %s\n", yytext);
    count(); 
    yylval.num = atoi(yytext);
    return NUMBER; 
}

"="         { printf("Matched: EQ\n"); count(); return EQ; }
"<"         { printf("Matched: LT\n"); count(); return LT; }
">"         { printf("Matched: GT\n"); count(); return GT; }
","         { printf("Matched: COMMA\n"); count(); return COMMA; }
";"         { printf("Matched: SEMICOLON\n"); count(); return SEMICOLON; }
"("         { printf("Matched: LPAREN\n"); count(); return LPAREN; }
")"         { printf("Matched: RPAREN\n"); count(); return RPAREN; }

.           { printf("Unexpected character: %s\n", yytext); }

%%

void count() {
    /* Placeholder for token tracking, e.g., for error reporting */
}

int yywrap() {
    return 1;
}