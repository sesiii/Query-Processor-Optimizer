%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "parser.tab.h"  /* Generated by Bison */

void count();
%}

%option yylineno
%option case-insensitive  

%%
[ \t\n\r]+      { /* Ignore whitespace */ }

"SELECT"    { count(); return SELECT; }
"FROM"      { count(); return FROM; }
"WHERE"     { count(); return WHERE; }
"JOIN"      { count(); return JOIN; }
"INNER"     { count(); return INNER; }
"ON"        { count(); return ON; }
"AND"       { count(); return AND; }
"."        { count(); return DOT; }
[a-zA-Z_][a-zA-Z0-9_]* { 
    count(); 
    yylval.str = strdup(yytext);
    return IDENTIFIER; 
}

[0-9]+(\.[0-9]+)? { 
    count(); 
    yylval.num = atoi(yytext);
    return NUMBER; 
}

"="         { count(); return EQ; }
"<"         { count(); return LT; }
">"         { count(); return GT; }
","         { count(); return COMMA; }
";"         { count(); return SEMICOLON; }
"("         { count(); return LPAREN; }
")"         { count(); return RPAREN; }

.           { printf("Unexpected character: %s\n", yytext); }

%%

void count() {
    /* Placeholder for token tracking, e.g., for error reporting */
}

int yywrap() {
    return 1;
}